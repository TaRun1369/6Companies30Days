
class dsu{
    
    public:
    vector<long long> parent,rank,size;
    dsu(long long n){
        rank.resize(n+1,0);
        parent.resize(n+1);
        size.resize(n+1,1);
        for(long long i=0;i<=n;i++){
            parent[i]=i;
        }
    }
    
    long long findUPar(long long node){
        if(node == parent[node]){
            return node;
        }
        return parent[node]=findUPar(parent[node]); // path compression
    }

    void unionbyRank(long long u,long long v){
        long long ulp_u =  findUPar(u);

        long long ulp_v = findUPar(v);
        if(ulp_u == ulp_v) return;
        if(rank[ulp_u] < rank[ulp_v]){
            parent[ulp_u] = ulp_v;
        }
        else if(rank[ulp_v] < rank[ulp_u]){
            parent[ulp_v] = ulp_u;
        }
        else{
            // koi bhi bann sakta 
            parent[ulp_v] = ulp_u;
            rank[ulp_u]++; 
        }
    }



     void unionbySize(long long u,long long v){
        long long ulp_u =  findUPar(u);

        long long ulp_v = findUPar(v);
        if(ulp_u == ulp_v) return;
        if(size[ulp_u] < size[ulp_v]){
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        
        else{
            // koi bhi bann sakta 
            parent[ulp_v] = ulp_u;
            size[ulp_u]+=size[ulp_v]; 
        }
    }


};


class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        
        int n = graph.size();
        int m = graph[0].size();
        dsu ds(n);
        set<int> s(initial.begin(),initial.end()); 
        for(int i = 0;i<n;i++){
            for(int j = 0;j<m;j++){
                    if(graph[i][j] == 1 && s.find(i) == s.end() && s.find(j) == s.end()){
                        ds.unionbySize(i,j);
                    } 
            }
        
        }
        int ans = -1;
        int maxisize = -1;
        unordered_map<int,set<int>> mp;
        unordered_map<int,int> kitneinfectedattachedtogroup;
        for(auto it : s){
            // cout<<it<<endl;
            // set<int> vis;
            int siz = 0;
            for(int i = 0 ; i< graph[it].size();i++){
                if(graph[it][i] == 0 || i == it || s.find(i) !=s.end()) continue; 
                // cout<<" neigh "<<iss<<endl;
                int up = ds.findUPar(i);
                if(mp[it].find(up) == mp[it].end() ){
                mp[it].insert(up); 
                kitneinfectedattachedtogroup[up]++;
                }
            }
        }
            for(auto it : s){
                int siz = 0;
                for(auto iss : mp[it]){
                    if(kitneinfectedattachedtogroup[iss] <=1){
                        siz += ds.size[iss];
                    }
                }
                if(siz > maxisize){
                    maxisize = siz;
                    ans = it;
                }
            }
        return ans;
    }
};